schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

type Addresses
  @join__type(graph: USER, key: "id")
{
  id: ID!
  address: String!
}

scalar DateTime
  @join__type(graph: PRODUCT)
  @join__type(graph: REVIEW)
  @join__type(graph: USER)

scalar join__FieldSet

enum join__Graph {
  PRODUCT @join__graph(name: "product", url: "http://localhost:4001/graphql")
  REVIEW @join__graph(name: "review", url: "http://localhost:4003/graphql")
  USER @join__graph(name: "user", url: "http://localhost:4002/graphql")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Mutation
  @join__type(graph: PRODUCT)
  @join__type(graph: REVIEW)
  @join__type(graph: USER)
{
  findOneProductById(productId: String!): Product @join__field(graph: PRODUCT)
  createProduct(name: String!, price: Float!): Product @join__field(graph: PRODUCT)
  createReview(productId: String!, userId: String!, score: Int!, observation: String!): Review @join__field(graph: REVIEW)
  createUser(name: String!, username: String!, address: String): User @join__field(graph: USER)
  updateUser(id: String!, name: String, username: String, address: String, city: String): User @join__field(graph: USER)
  deleteUser(id: String!): User @join__field(graph: USER)
}

type Product
  @join__type(graph: PRODUCT, key: "id")
  @join__type(graph: REVIEW)
{
  id: ID!
  name: String! @join__field(graph: PRODUCT)
  price: Float! @join__field(graph: PRODUCT)
  createdAt: DateTime! @join__field(graph: PRODUCT)
  updatedAt: DateTime @join__field(graph: PRODUCT)
  deletedAt: DateTime @join__field(graph: PRODUCT)
}

type Query
  @join__type(graph: PRODUCT)
  @join__type(graph: REVIEW)
  @join__type(graph: USER)
{
  findAllProducts: [Product] @join__field(graph: PRODUCT)
  findAllReviews: [Review] @join__field(graph: REVIEW)
  findOneReviewByProductId: Review @join__field(graph: REVIEW)
  findAllUsers: [User] @join__field(graph: USER)
}

type Review
  @join__type(graph: REVIEW, key: "id")
{
  id: ID!
  score: Int
  observation: String
  user: User
  product: Product
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
}

type User
  @join__type(graph: REVIEW)
  @join__type(graph: USER, key: "id")
{
  id: ID!
  name: String! @join__field(graph: USER)
  username: String! @join__field(graph: USER)
  createdAt: DateTime! @join__field(graph: USER)
  updatedAt: DateTime @join__field(graph: USER)
  deletedAt: DateTime @join__field(graph: USER)
  addresses: [Addresses] @join__field(graph: USER)
}